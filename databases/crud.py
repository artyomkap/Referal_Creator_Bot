from typing import List, Sequence

from sqlalchemy import select, update, insert, delete
from sqlalchemy.orm import selectinload
from sqlalchemy.ext.asyncio import AsyncSession
from databases.models import User, UserCode, Hosting_Website, UserCodeType, Domains, ProfitType, UserGroup, UserRoles, \
    DrawingCategory
from databases.enums import CurrencyEnum
from aiogram import Bot
from keyboards import keyboard


async def get_user_by_tg_id(session: AsyncSession, tg_id: int) -> User | None:
    result = await session.execute(select(User).where(User.tg_id == tg_id))
    return result.scalars().first()


async def register_referal(session: AsyncSession, referer: User, user: User, bot: Bot):
    (await referer.awaitable_attrs.referals).append(user)
    if referer.status == 2:
        await bot.send_message(
            referer.tg_id,
            f'–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª {user.tg_id} –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞—à–µ–∏ÃÜ —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏. '
        )


async def get_promocodes_by_user(session: AsyncSession, tg_id: int) -> Sequence:
    result = await session.execute(select(UserCode).where(UserCode.user_id == tg_id))
    return result.scalars().all()


async def get_promocode_by_id(session: AsyncSession, id: int) -> UserCode | None:
    result = await session.execute(select(UserCode).where(UserCode.id == id))
    return result.scalars().first()


async def get_websites(session: AsyncSession) -> Sequence:
    result = await session.execute(select(Hosting_Website))
    return result.scalars().all()


async def get_promocode_types(session: AsyncSession) -> Sequence:
    result = await session.execute(select(UserCodeType))
    return result.scalars().all()


async def get_hosting_website(session, website_type) -> Sequence:
    result = await session.execute(select(Hosting_Website).where(Hosting_Website.type == website_type))
    host_website = result.scalars().first()
    domain = await session.execute(select(Domains.domain).where(Domains.id == host_website.main_domain_id))
    return domain.scalars().first()


async def get_promocode_by_name(session, promocode_name) -> UserCode | None:
    result = await session.execute(select(UserCode).where(UserCode.name == promocode_name))
    return result.scalars().first()


async def init_db(session: AsyncSession):
    result = await session.execute(select(Domains))
    if not result.scalars().all():
        # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è
        await session.execute(insert(Domains).values([
            {'id': 1, 'domain': 'antikino.com'},
            {'id': 2, 'domain': 'theatre.com'},
            {'id': 3, 'domain': 'exhibition.com'},
            {'id': 4, 'domain': 'trade.com'},
            {'id': 5, 'domain': 'blablacar.com'},
            {'id': 6, 'domain': 'payment.com'}
        ]))

    result = await session.execute(select(ProfitType))
    if not result.scalars().all():  # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è
        await session.execute(insert(ProfitType).values([
            {'id': 1, 'name': '–ü–µ—Ä–≤–∞—è –æ–ø–ª–∞—Ç–∞', 'is_unique': True, 'payout_percent': 0.6},
            {'id': 2, 'name': 'X-–û–ø–ª–∞—Ç–∞', 'is_unique': False, 'payout_percent': 0.5},
            {'id': 3, 'name': '–í–æ–∑–≤—Ä–∞—Ç', 'is_unique': False, 'payout_percent': 0.45},
            {'id': 4, 'name': '–ü—Ä—è–º–æ–π –ø–µ—Ä–µ–≤–æ–¥', 'is_unique': True, 'payout_percent': 0.55},
            {'id': 5, 'name': '–û–±–Ω–∞–ª', 'is_unique': False, 'payout_percent': 0.45}
        ]))

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É UserCodeType
    result = await session.execute(select(UserCodeType))
    if not result.scalars().all():  # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è
        await session.execute(insert(UserCodeType).values([
            {'id': 1, 'name': 'Cinema'},
            {'id': 2, 'name': 'Theatre'},
            {'id': 3, 'name': 'Exhibitions'},
            {'id': 4, 'name': 'Trade'},
            {'id': 5, 'name': 'BlaBlaCar'},
            {'id': 6, 'name': 'Payment'}
        ]))

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É UserGroup
    result = await session.execute(select(UserGroup))
    if not result.scalars().all():  # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è
        await session.execute(insert(UserGroup).values([
            {'id': 1, 'name': 'Silver', 'percent_bonus': 0, 'code_limit': 5},
            {'id': 2, 'name': 'Gold', 'percent_bonus': 0.01, 'code_limit': 10},
            {'id': 3, 'name': 'Titanium', 'percent_bonus': 0.02, 'code_limit': 7},
            {'id': 4, 'name': 'Sapphire', 'percent_bonus': 0.03, 'code_limit': 7},
            {'id': 5, 'name': 'Ruby', 'percent_bonus': 0.04, 'code_limit': 10},
            {'id': 6, 'name': 'Diamond', 'percent_bonus': 0.05, 'code_limit': 30}
        ]))

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É UserRoles
    result = await session.execute(select(UserRoles))
    if not result.scalars().all():  # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è
        await session.execute(insert(UserRoles).values([
            {'id': 1, 'name': 'ü•∑üèø –í–æ—Ä–∫–µ—Ä'},
            {'id': 2, 'name': 'üí≥ –í–±–∏–≤–µ—Ä'},
            {'id': 3, 'name': 'ü§¥ –ê–¥–º–∏–Ω'},
            {'id': 4, 'name': 'üë®‚Äçüíª –ü—Ä–æ–≥–µ—Ä'},
            {'id': 5, 'name': 'üì£ –°–∞–ø–ø–æ—Ä—Ç'}
        ]))

    result = await session.execute(select(DrawingCategory))
    if not result.scalars().all():  # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è
        await session.execute(insert(DrawingCategory).values([
            {'id': 1, 'name': 'üéü –ë–∏–ª–µ—Ç—ã'},
            {'id': 2, 'name': 'üÜò –¢–ü'},
            {'id': 3, 'name': 'üåê –°–∞–π—Ç'},
            {'id': 4, 'name': 'üè¶ –ë–∞–Ω–∫'}
        ]))

    result = await session.execute(select(Hosting_Website))
    if not result.scalars().all():
        # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è
        await session.execute(insert(Hosting_Website).values([
            {'id': 1, 'name': 'Antikino', 'type': 1, 'main_domain_id': 1},
            {'id': 2, 'name': 'Theatre', 'type': 2, 'main_domain_id': 2},
            {'id': 3, 'name': 'Exhibition', 'type': 3, 'main_domain_id': 3},
            {'id': 4, 'name': 'Trade', 'type': 4, 'main_domain_id': 4},
            {'id': 5, 'name': 'BlaBlaCar', 'type': 5, 'main_domain_id': 5},
            {'id': 6, 'name': 'Payment', 'type': 6, 'main_domain_id': 6}
        ]))

    await session.commit()  # –ö–æ–º–º–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤–Ω–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ session.begin()
